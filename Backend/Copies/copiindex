/* Charger .env au tout dÃ©but de l'ENTRYPOINT aussi (safe)
import "dotenv/config";
import express from "express";
import cors from "cors";
import pool, { initDB } from "./src/config/db.js";

import agentRoutes from "./src/modules/agent/routes/agentRoutes.js";
import clientRoutes from "./src/modules/client/routes/clientRoutes.js";
import appelRoutes from "./src/modules/appel/routes/appelRoutes.js";
import sousStatutRoutes from "./src/modules/sous_statut/routes/statutRoutes.js";
import agentReceptionRoutes from "./src/modules/agentReception/routes/agentReceptionRoutes.js";
import JournalRoutes from "./src/modules/journalAppelAffetation/routes/JournalRoutes.js";
import authRoutes from "./src/modules/auth/routes/authRoutes.js";

const app = express();
app.use(cors());
app.use(express.json());

app.get("/test", (_req, res) => res.send("âœ… Serveur OK"));

// Routes API
app.use("/api", agentRoutes);
app.use("/api", agentReceptionRoutes);
app.use("/api", clientRoutes);
app.use("/api", appelRoutes);
app.use("/api", sousStatutRoutes);
app.use("/api", JournalRoutes);
app.use("/auth", authRoutes);

const PORT = Number(process.env.PORT || 5000);

(async () => {
  try {
    await initDB({ retries: 3, delayMs: 1000 });
  } catch (e) {
    console.error("ðŸš« Impossible de se connecter Ã  la DB aprÃ¨s retries. Le serveur HTTP dÃ©marre quand mÃªme.");
  }

  app.listen(PORT, "0.0.0.0", () => {
    console.log(`âœ… Backend lancÃ© sur http://localhost:${PORT}`);
  });
})();*/